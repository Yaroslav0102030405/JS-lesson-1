/**
 * ! Що таке JavaScript?
 * - це динамічна мова програмування
 */

/**
 * ? Як виконується код JavaScript?
 * код JS викнокується з верху до низу по рядку
 */

/**
 * ? Для чого використовується язик JavaScript?
 * призначений для взаємодії з елементами веб-сторінок та додавання інтерактивності
 * - нескладні обчислення
 * - динамічна зміна HTML-документа
 * - зберігання інформації у браузері користувача
 * - перевірка та маніпуляція введеними користувачем даними
 * - змінювати структуру та зовнішній вигляд вебсторінки
 * - створення інтерактивних елементів: галерей, графіків тощо
 * - асинхронно обмінюватися даними з сервером (взаємодія з бекендом)
 */

/**
 * TODO: Підключення JavaScript скрипту
 * скрипт підключають перед закриваючим тегом <body>
 * <body>
    <!-- контент -->
    <script src="js/script.js"></script>
  </body>
 */

/**
 * ? Підключення декілька JavaScript скриптів
 * При підключенні кількох JavaScript-файлів до сторінки інтерпретатор
 * обробляє їх у тому порядку, в якому вони вказані в HTML - файлі.
 * <script src="js/script-1.js"></script>
 * <script src="js/script-2.js"></script>
 */

/** 
 * ? Інструменти розробника
 * Консоль браузера показує інформацію, пов'язану з веб-сторінкою, у тому числі 
 * повідомлення про помилки та попередження виконання JS-коду, запущеного в контексті сторінки.
 */

/**
 * ! Основи синтаксису
 */

/**
 * ? Інструкція
 * Інструкція (statement) - це пов'язаний набір слів та символів із синтаксису мови, 
 * які поєднуються щоб висловити одну ідею, одну інструкцію для машини.
 */


/**
 * ? Суворий режим
 * script.js
"use strict";
// Это комментарий. Дальше идет весь код JS-файла
 * Щоб перевести скрипт у строгий режим, достатньо вказати директиву на початку js-файлу. 
 * Завжди пишіть код у строгому режимі.
 */

/**
 * ! Змінні та типи
 * Змінні використовуються для зберігання даних і складаються з ідентифікатора 
 * (імені) та області пам'яті, де зберігається їх значення.
 */

/**
 * ? Імена змінних
 * Використання camelCase-нотації для ідентифікаторів є стандартом. 
 * Перше слово пишеться малими літерами, а кожне наступне починається з великої
 * Наприклад, user, greetUser, getUserData, єActive, activeGuestCount, totalWorkerSalary.
 */

/**
 * ? Оголошення змінних const і let
 * Оголошення змінної починається з ключового слова const. 
 * Така змінна має бути відразу ініціалізована значенням, після чого його не можна перевизначити.
 * const yearOfBirth = 2006;
 * console.log(yearOfBirth); // 2006
 * 
 * Для того, щоб оголосити змінну, якій у майбутньому можна буде надати нове значення, використовується ключове слово let.
 * let age;
 * console.log(age); // undefined
 * age = 14;
 * console.log(age); // 14
 */

/**
 * ? Коли використовувати const та let
 * Відмінність const і let полягає в тому, що const забороняє повторне надання змінної будь-якого значення.
 */

/**
 * ? Константи
 * Імена КОНСТАНТ - змінних, значення яких ніколи не змінюється протягом роботи всього скрипта, 
 * зазвичай записуються у форматі UPPER_SNAKE_CASE.
 * Константа хранящая значение цвета const COLOR_TEAL = "#009688"
 * Константа хранящая сообщение о результате логина const LOGIN_SUCCESS_MESSAGE = "Добро пожаловать!";
 */

/**
 * ! Примітивні типи
 * ? Number - 
 * цілі числа та дробові числа const age = 20; const points = 15.8;
 * ? String - 
 * рядки, послідовність із нуля або більше символів. Рядок починається і закінчується одиночною ', або подвійними лапками'
 * const username = "JavaSript для начинающих"; const description = "50px";
 * ? Boolean - 
 * логічний тип даних, прапори стану. Усього два значення: true та false.
 * true - так, мабуть, істина, 1
 * false - ні, невірно, брехня, 0
 * Зверніть увагу на імена змінних, які містять буль. Вони запитують, і відповідь на нього - так чи ні.
 * const isLoggedIn = true;
 * const canMerge = false;
 * ? null - 
 * особливе значення, яке по суті означає ніщо
 * ? undefined - 
 * спеціальне значення. за умовчанням, коли змінна оголошується, але не ініціалізується
 */

/**
 * TODO: Оператор typeof - Використовується для отримання типу значення змінної
 * const quantity = 17; console.log(typeof quantity); // "number"
 * const message = "JavaScript is awesome!"; console.log(typeof message); // "string"
 * const isSidebarOpen = false; console.log(typeof isSidebarOpen); // "boolean"
 * let inputValue = null; console.log(typeof inputValue); // "object"
 * let username; console.log(typeof username); // "undefined"
 */

/**
 * ! Взаємодія з користувачем
 */

/**
 * ? Виведення даних
 * Для виведення даних є два методи: console.log() та alert()
 * const message = "JavaScript is awesome!";
 * console.log(message); // JavaScript is awesome!
 * 
 * Метод alert() виводить модальне вікно, текст якого відповідає значенню змінної (або літералу), яку передамо в дужках
 * const message = "JavaScript is awesome!";
 * alert(message);
 */

/**
 * ! Отримання даних
 * Для отримання даних від користувача є prompt() та confirm()
 */

/**
 * ? prompt() - 
 * виводить модальне вікно з полем введення та кнопками Ok та Cancel. 
 * При натисканні Ok результатом буде те, що ввів користувач, при Cancel - повертається null.
 * const value = prompt("Please enter a number!"); 
 * console.log(typeof value); // "string" 
 * console.log(value); // "5
 */

/**
 * ? confirm() - 
 * виводить модальне вікно з повідомленням і дві кнопки, Ok і Cancel. 
 * При натисканні на Ok результатом буде true, при натисканні на Cancel - повертається false.
 * const isComing = confirm("Please confirm hotel reservation");
 * console.log(isComing);
 */

/**
 * ! Основні оператори
 */